{"version":3,"sources":["hooks/useLocalStorage.js","auth/UserContext.js","routes-nav/Navigation.js","homepage/Homepage.js","common/SearchForm.js","api/api.js","companies/CompanyCard.js","common/LoadingSpinner.js","companies/CompanyList.js","jobs/JobCard.js","jobs/JobCardList.js","jobs/JobList.js","companies/CompanyDetail.js","common/Alert.js","auth/LoginForm.jsx","profiles/ProfileForm.js","auth/SignupForm.js","routes-nav/PrivateRoute.js","routes-nav/Routes.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","firstValue","initialValue","localStorage","getItem","useState","item","setItem","useEffect","console","debug","removeItem","UserContext","React","createContext","Navigation","logout","currentUser","useContext","className","to","onClick","first_name","username","Homepage","firstName","SearchForm","searchFor","searchTerm","setSearchTerm","onSubmit","evt","preventDefault","trim","undefined","name","placeholder","value","onChange","target","type","BASE_URL","process","JoblyApi","endpoint","data","method","url","headers","Authorization","token","params","axios","error","response","message","Array","isArray","this","request","res","user","companies","handle","company","title","jobs","id","CompanyCard","description","logoUrl","src","alt","LoadingSpinner","i","CompanyList","setCompanies","search","getCompanies","length","map","c","JobCard","salary","equity","companyName","companyHandle","hasAppliedToJob","applyToJob","applied","setApplied","handleApply","companyUrl","href","digitsRev","salaryStr","toString","push","reverse","join","formatSalary","disabled","JobCardList","job","JobList","setJobs","getJobs","CompanyDetail","useParams","setCompany","isLoaded","setIsLoaded","getCompany","style","Alert","messages","role","LoginForm","login","history","useHistory","password","formData","setFormData","formErrors","setFormErrors","handleSubmit","result","success","errors","handleChange","l","autoComplete","required","ProfileForm","setCurrentUser","lastName","email","saveConfirmed","setSaveConfirmed","profileData","saveProfile","updatedUser","f","SignupForm","signup","PrivateRoute","exact","path","children","Routes","register","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","setToken","signupData","loginData","has","jwt","decode","getCurrentUser","applications","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.75acea4d.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nconst useLocalStorage = (key, firstValue = null) => {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(\n    function setKeyInLocalStorage() {\n      console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n      if (item === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, item);\n      }\n    },\n    [key, item]\n  );\n\n  return [item, setItem];\n};\n\nexport default useLocalStorage;\n","import React from \"react\";\n\n/** Context: provides currentUser object and setter for it throughout app. */\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import React, { useContext } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\nimport \"./Navigation.css\";\n\n/** Navigation bar for site. Shows up on every page.\n *\n * When user is logged in, shows links to main areas of site. When not,\n * shows link to Login and Signup forms.\n *\n * Rendered by App.\n */\n\nconst Navigation = ({ logout }) => {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\n\n  function loggedInNav() {\n    return (\n      <ul className=\"navbar-nav ml-auto\">\n        <li className=\"nav-item mr-4\">\n          <NavLink className=\"nav-link\" to=\"/companies\">\n            Companies\n          </NavLink>\n        </li>\n        <li className=\"nav-item mr-4\">\n          <NavLink className=\"nav-link\" to=\"/jobs\">\n            Jobs\n          </NavLink>\n        </li>\n        <li className=\"nav-item mr-4\">\n          <NavLink className=\"nav-link\" to=\"/profile\">\n            Profile\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/\" onClick={logout}>\n            Log out {currentUser.first_name || currentUser.username}\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  function loggedOutNav() {\n    return (\n      <ul className=\"navbar-nav ml-auto\">\n        <li className=\"nav-item mr-4\">\n          <NavLink className=\"nav-link\" to=\"/login\">\n            Login\n          </NavLink>\n        </li>\n        <li className=\"nav-item mr-4\">\n          <NavLink className=\"nav-link\" to=\"/signup\">\n            Sign Up\n          </NavLink>\n        </li>\n      </ul>\n    );\n  }\n\n  return (\n    <nav className=\"Navigation navbar navbar-expand-md\">\n      <Link className=\"navbar-brand\" to=\"/\">\n        Jobly\n      </Link>\n      {currentUser ? loggedInNav() : loggedOutNav()}\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Homepage.css\";\nimport UserContext from \"../auth/UserContext\";\n\n/** Homepage of site.\n *\n * Shows welcome message or login/register buttons.\n *\n * Routed at /\n *\n * Routes -> Homepage\n */\n\nconst Homepage = () => {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Homepage\", \"currentUser=\", currentUser);\n\n  return (\n    <div className=\"Homepage\">\n      <div className=\"container text-center\">\n        <h1 className=\"mb-4 font-weight-bold\">Jobly</h1>\n        <p className=\"lead\">\n          The job board for people bored of looking for jobs.\n        </p>\n        {currentUser ? (\n          <h2>\n            Welcome back, {currentUser.firstName || currentUser.username}!\n          </h2>\n        ) : (\n          <p>\n            <Link className=\"btn btn-primary font-weight-bold mr-3\" to=\"/login\">\n              Log in\n            </Link>\n            <Link className=\"btn btn-success font-weight-bold\" to=\"/signup\">\n              Sign up\n            </Link>\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Homepage;\n","import React, { useState } from \"react\";\nimport \"./SearchForm.css\";\n\n/** Search widget.\n *\n * Appears on CompanyList and JobList so that these can be filtered\n * down.\n *\n * This component doesn't *do* the searching, but it renders the search\n * form and calls the `searchFor` function prop that runs in a parent to do the\n * searching.\n *\n * { CompanyList, JobList } -> SearchForm\n */\n\nconst SearchForm = ({ searchFor }) => {\n  console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  /** Tell parent to filter */\n  function handleSubmit(evt) {\n    // take care of accidentally trying to search for just spaces\n    evt.preventDefault();\n    searchFor(searchTerm.trim() || undefined);\n    setSearchTerm(searchTerm.trim());\n  }\n\n  /** Update form fields */\n  function handleChange(evt) {\n    setSearchTerm(evt.target.value);\n  }\n\n  return (\n    <div className=\"SearchForm mb-4\">\n      <form className=\"form-inline\" onSubmit={handleSubmit}>\n        <input\n          className=\"form-control form-control-lg flex-grow-1\"\n          name=\"searchTerm\"\n          placeholder=\"Enter search term...\"\n          value={searchTerm}\n          onChange={handleChange}\n        />\n        <button type=\"submit\" className=\"btn btn-lg btn-success\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default SearchForm;\n","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get list of jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title });\n    return res.jobs;\n  }\n\n  /** Apply to a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\nexport default JoblyApi;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./CompanyCard.css\";\n\n/* Show limited information about a company */\n\nconst CompanyCard = ({ name, description, logoUrl, handle }) => {\n  console.debug(\"CompanyCard\", logoUrl);\n\n  return (\n    <Link className=\"CompanyCard card\" to={`/companies/${handle}`}>\n      <div className=\"card-body\">\n        <h6 className=\"card-title\">\n          {name}\n          {logoUrl && (\n            <img src={logoUrl} alt={name} className=\"float-right ml-5\" />\n          )}\n        </h6>\n        <p>\n          <small>{description}</small>\n        </p>\n      </div>\n    </Link>\n  );\n};\n\nexport default CompanyCard;\n","import React from \"react\";\nimport \"./LoadingSpinner.css\";\n\n/** Loading message used by components that fetch API data. */\n\nconst LoadingSpinner = () => {\n  return <div className=\"LoadingSpinner\">Loading ...</div>;\n};\n\nexport default LoadingSpinner;\n","import React, { useState, useEffect } from \"react\";\nimport SearchForm from \"../common/SearchForm\";\nimport JoblyApi from \"../api/api\";\nimport CompanyCard from \"./CompanyCard\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Show page with list of companies.\n *\n * On mount, loads companies from API.\n * Re-loads filtered companies on submit from search form.\n *\n * This is routed to at /companies\n *\n * Routes -> { CompanyCard, SearchForm }\n */\n\nconst CompanyList = () => {\n  console.debug(\"CompanyList\");\n\n  const [companies, setCompanies] = useState(null);\n\n  useEffect(function getCompaniesOnMount() {\n    console.debug(\"CompanyList useEffect getCompaniesOnMount\");\n    search();\n  }, []);\n\n  /** Triggered by search form submit; reloads companies. */\n  async function search(name) {\n    let companies = await JoblyApi.getCompanies(name);\n    setCompanies(companies);\n  }\n\n  if (!companies) return <LoadingSpinner />;\n\n  return (\n    <div className=\"CompanyList col-md-8 offset-md-2\">\n      <SearchForm searchFor={search} />\n      {companies.length ? (\n        <div className=\"CompanyList-list\">\n          {companies.map((c) => (\n            <CompanyCard\n              key={c.handle}\n              handle={c.handle}\n              name={c.name}\n              description={c.description}\n              logoUrl={c.logoUrl}\n            />\n          ))}\n        </div>\n      ) : (\n        <p className=\"lead\">Sorry, no results were found!</p>\n      )}\n    </div>\n  );\n};\n\nexport default CompanyList;\n","import React, { useContext, useState } from \"react\";\nimport \"./JobCard.css\";\nimport UserContext from \"../auth/UserContext\";\n\n/** Show limited information about a job.\n *\n * Is rendered by JobCardList to show a \"card\" for each job.\n *\n * Receives apply func prop from parent, which is called on apply.\n *\n * JobCardList -> JobCard\n */\n\nconst JobCard = ({ id, title, salary, equity, companyName, companyHandle }) => {\n  console.debug(\"JobCard\");\n\n  const { hasAppliedToJob, applyToJob } = useContext(UserContext);\n  const [applied, setApplied] = useState();\n\n  React.useEffect(\n    function updateAppliedStatus() {\n      console.debug(\"JobCard useEffect updateAppliedStatus\", \"id=\", id);\n\n      setApplied(hasAppliedToJob(id));\n    },\n    [id, hasAppliedToJob]\n  );\n\n  /** Apply for a job */\n  async function handleApply(evt) {\n    if (hasAppliedToJob(id)) return;\n    applyToJob(id);\n    setApplied(true);\n  }\n\n  const companyUrl = `/companies/${companyHandle}`;\n\n  return (\n    <div className=\"JobCard card\">\n      {\" \"}\n      {applied}\n      <div className=\"card-body\">\n        <h6 className=\"card-title\">\n          <a href={companyUrl}>{companyName}</a>\n        </h6>\n        <p>{title}</p>\n        {salary && (\n          <div>\n            <small>Salary: {formatSalary(salary)}</small>\n          </div>\n        )}\n        {equity !== undefined && (\n          <div>\n            <small>Equity: {equity}</small>\n          </div>\n        )}\n        {applied ? (\n          <button\n            className=\"btn btn-success font-weight-bold text-uppercase float-right\"\n            onClick={handleApply}\n            disabled={applied}\n          >\n            {applied ? \"Applied\" : \"Apply\"}\n          </button>\n        ) : (\n          <button\n            className=\"btn btn-danger font-weight-bold text-uppercase float-right\"\n            onClick={handleApply}\n            disabled={applied}\n          >\n            {applied ? \"Applied\" : \"Apply\"}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\n/** Render integer salary like '$1,250,343' */\n\nfunction formatSalary(salary) {\n  const digitsRev = [];\n  const salaryStr = salary.toString();\n\n  for (let i = salaryStr.length - 1; i >= 0; i--) {\n    digitsRev.push(salaryStr[i]);\n    if (i > 0 && i % 3 === 0) digitsRev.push(\",\");\n  }\n\n  return \"$\" + digitsRev.reverse().join(\"\");\n}\n\nexport default JobCard;\n","import React from \"react\";\nimport JobCard from \"./JobCard\";\n\n/* Show list of job cards */\n\nconst JobCardList = ({ jobs }) => {\n  console.debug(\"JobCardList\", \"jobs=\", jobs);\n\n  return (\n    <div className=\"JobCardList\">\n      {jobs.map((job) => (\n        <JobCard\n          key={job.id}\n          id={job.id}\n          title={job.title}\n          salary={job.salary}\n          equity={job.equity}\n          companyName={job.companyName}\n          companyHandle={job.companyHandle}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default JobCardList;\n","import React, { useState, useEffect } from \"react\";\nimport Search from \"../common/SearchForm\";\nimport JoblyApi from \"../api/api\";\nimport JobCardList from \"./JobCardList\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Show page with list of jobs.\n *\n * On mount, loads jobs from API.\n * Re-loads filtered jobs on submit from search form.\n *\n * JobList -> JobCardList -> JobCard\n *\n * This is routed to at /jobs\n */\n\nconst JobList = () => {\n  console.debug(\"JobList\");\n\n  const [jobs, setJobs] = useState(null);\n\n  useEffect(function getAllJobsOnMount() {\n    console.debug(\"JobList useEffect getAllJobsOnMount\");\n    search();\n  }, []);\n\n  /** Triggered by search form submit; reloads jobs. */\n  async function search(title) {\n    let jobs = await JoblyApi.getJobs(title);\n    setJobs(jobs);\n  }\n\n  if (!jobs) return <LoadingSpinner />;\n\n  return (\n    <div className=\"JobList col-md-8 offset-md-2\">\n      <Search searchFor={search} />\n      {jobs.length ? (\n        <JobCardList jobs={jobs} />\n      ) : (\n        <p className=\"lead\">Sorry, no jobs found matching your search!</p>\n      )}\n    </div>\n  );\n};\n\nexport default JobList;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport JoblyApi from \"../api/api\";\nimport JobCardList from \"../jobs/JobCardList\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\n/** Company Detail page.\n *\n * Renders information about company, along with the jobs at that company.\n */\n\nconst CompanyDetail = () => {\n  const { handle } = useParams();\n  console.debug(\"CompanyDetail\", \"handle=\", handle);\n\n  const [company, setCompany] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(\n    function getCompanyAndJobsForUser() {\n      async function getCompany() {\n        try {\n          setCompany(await JoblyApi.getCompany(handle));\n        } catch (err) {\n          console.debug(err.message);\n        } finally {\n          setIsLoaded(true);\n        }\n      }\n\n      getCompany();\n    },\n    [handle]\n  );\n\n  if (!isLoaded) return <LoadingSpinner />;\n\n  if (!company)\n    return (\n      <div className=\"CompanyDetail col-md-8 offset-md-2\">\n        <h4 style={{ \"text-align\": \"center\" }}>\n          Sorry. No company matches for that handle.\n        </h4>\n      </div>\n    );\n\n  return (\n    <div className=\"CompanyDetail col-md-8 offset-md-2\">\n      <h4>{company.name}</h4>\n      <p>{company.description}</p>\n      <JobCardList jobs={company.jobs} />\n    </div>\n  );\n};\n\nexport default CompanyDetail;\n","import React from \"react\";\n\n/** Presentational component for showing bootstrap-style alerts.\n *\n * { LoginForm, SignupForm, ProfileForm } -> Alert\n **/\n\nconst Alert = ({ type = \"danger\", messages = [] }) => {\n  console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\n\n  return (\n    <div className={`alert alert-${type}`} role=\"alert\">\n      {messages.map((error) => (\n        <p className=\"mb-0 small\" key={error}>\n          {error}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\n\n/** Login form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls login function prop\n * - redirects to /companies route\n *\n * Routes -> LoginForm -> Alert\n * Routed as /login\n */\n\nconst LoginForm = ({ login }) => {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n    \"LoginForm\",\n    \"login=\",\n    typeof login,\n    \"formData=\",\n    formData,\n    \"formErrors\",\n    formErrors\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await login(formData);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData((l) => ({ ...l, [name]: value }));\n  }\n\n  return (\n    <div className=\"LoginForm\">\n      <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n        <h3 className=\"mb-3\">Log In</h3>\n\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"form-group\">\n                <label>Username</label>\n                <input\n                  name=\"username\"\n                  className=\"form-control\"\n                  value={formData.username}\n                  onChange={handleChange}\n                  autoComplete=\"username\"\n                  required\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Password</label>\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  className=\"form-control\"\n                  value={formData.password}\n                  onChange={handleChange}\n                  autoComplete=\"current-password\"\n                  required\n                />\n              </div>\n\n              {formErrors.length ? (\n                <Alert type=\"danger\" messages={formErrors} />\n              ) : null}\n\n              <button\n                className=\"btn btn-success float-right\"\n                onSubmit={handleSubmit}\n              >\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState, useContext } from \"react\";\nimport Alert from \"../common/Alert\";\nimport JoblyApi from \"../api/api\";\nimport UserContext from \"../auth/UserContext\";\n\n/** Profile editing form.\n *\n * Displays profile form and handles changes to local form state.\n * Submitting the form calls the API to save, and triggers user reloading\n * throughout the site.\n *\n */\n\nconst ProfileForm = () => {\n  const { currentUser, setCurrentUser } = useContext(UserContext);\n  const [formData, setFormData] = useState({\n    firstName: currentUser.firstName,\n    lastName: currentUser.lastName,\n    email: currentUser.email,\n    username: currentUser.username,\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  const [saveConfirmed, setSaveConfirmed] = useState(false);\n\n  console.debug(\n    \"ProfileForm\",\n    \"currentUser=\",\n    currentUser,\n    \"formData=\",\n    formData,\n    \"formErrors=\",\n    formErrors,\n    \"saveConfirmed=\",\n    saveConfirmed\n  );\n\n  /** on form submit:\n   * - attempt save to backend & report any errors\n   * - if successful\n   *   - clear previous error messages and password\n   *   - show save-confirmed message\n   *   - set current user info throughout the site\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n\n    let profileData = {\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n      password: formData.password,\n    };\n\n    let username = formData.username;\n    let updatedUser;\n\n    try {\n      updatedUser = await JoblyApi.saveProfile(username, profileData);\n    } catch (errors) {\n      debugger;\n      setFormErrors(errors);\n      return;\n    }\n\n    setFormData((f) => ({ ...f, password: \"\" }));\n    setFormErrors([]);\n    setSaveConfirmed(true);\n\n    // trigger reloading of user information throughout the site\n    setCurrentUser(updatedUser);\n  }\n\n  /** Handle form data changing */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData((f) => ({\n      ...f,\n      [name]: value,\n    }));\n    setFormErrors([]);\n  }\n\n  return (\n    <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n      <h3>Profile</h3>\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <form>\n            <div className=\"form-group\">\n              <label>Username</label>\n              <p className=\"form-control-plaintext\">{formData.username}</p>\n            </div>\n            <div className=\"form-group\">\n              <label>First Name</label>\n              <input\n                name=\"firstName\"\n                className=\"form-control\"\n                value={formData.firstName}\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Last Name</label>\n              <input\n                name=\"lastName\"\n                className=\"form-control\"\n                value={formData.lastName}\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Email</label>\n              <input\n                name=\"email\"\n                className=\"form-control\"\n                value={formData.email}\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Confirm password to make changes:</label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                className=\"form-control\"\n                value={formData.password}\n                onChange={handleChange}\n              />\n            </div>\n\n            {formErrors.length ? (\n              <Alert type=\"danger\" messages={formErrors} />\n            ) : null}\n\n            {saveConfirmed ? (\n              <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\n            ) : null}\n\n            <button\n              className=\"btn btn-success btn-block mt-4\"\n              onClick={handleSubmit}\n            >\n              Save Changes\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileForm;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\n\n/** Signup form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls signup function prop\n * - redirects to /companies route\n *\n * Routes -> SignupForm -> Alert\n * Routed as /signup\n */\n\nfunction SignupForm({ signup }) {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n    \"SignupForm\",\n    \"signup=\",\n    typeof signup,\n    \"formData=\",\n    formData,\n    \"formErrors=\",\n    formErrors\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await signup(formData);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData((data) => ({ ...data, [name]: value }));\n  }\n\n  return (\n    <div className=\"SignupForm\">\n      <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n        <h2 className=\"mb-3\">Sign Up</h2>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <form onSubmit={handleSubmit}>\n              <div className=\"form-group\">\n                <label>Username</label>\n                <input\n                  name=\"username\"\n                  className=\"form-control\"\n                  value={formData.username}\n                  onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Password</label>\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  className=\"form-control\"\n                  value={formData.password}\n                  onChange={handleChange}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label>First name</label>\n                <input\n                  name=\"firstName\"\n                  className=\"form-control\"\n                  value={formData.firstName}\n                  onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Last name</label>\n                <input\n                  name=\"lastName\"\n                  className=\"form-control\"\n                  value={formData.lastName}\n                  onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                  type=\"email\"\n                  name=\"email\"\n                  className=\"form-control\"\n                  value={formData.email}\n                  onChange={handleChange}\n                />\n              </div>\n\n              {formErrors.length ? (\n                <Alert type=\"danger\" messages={formErrors} />\n              ) : null}\n\n              <button\n                type=\"submit\"\n                className=\"btn btn-success float-right\"\n                onSubmit={handleSubmit}\n              >\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SignupForm;\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\n\n/** \"Higher-Order Component\" for private routes.\n *\n * In routing component, use these instead of <Route ...>. This component\n * will check if there is a valid current user and only continues to the\n * route if so. If no user is present, redirects to login form.\n */\n\nfunction PrivateRoute({ exact, path, children }) {\n  const { currentUser } = useContext(UserContext);\n\n  console.debug(\n      \"PrivateRoute\",\n      \"exact=\", exact,\n      \"path=\", path,\n      \"currentUser=\", currentUser,\n  );\n\n  if (!currentUser) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n      <Route exact={exact} path={path}>\n        {children}\n      </Route>\n  );\n}\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Homepage from \"../homepage/Homepage\";\nimport CompanyList from \"../companies/CompanyList\";\nimport JobList from \"../jobs/JobList\";\nimport CompanyDetail from \"../companies/CompanyDetail\";\nimport LoginForm from \"../auth/LoginForm\";\nimport ProfileForm from \"../profiles/ProfileForm\";\nimport SignupForm from \"../auth/SignupForm\";\nimport PrivateRoute from \"./PrivateRoute\";\n\n/** Site-wide routes.\n *\n * Parts of site should only be visitable when logged in. Those routes are\n * wrapped by <PrivateRoute>, which is an authorization component.\n *\n * Visiting a non-existant route redirects to the homepage.\n */\n\nfunction Routes({ login, signup }) {\n  console.debug(\n      \"Routes\",\n      `login=${typeof login}`,\n      `register=${typeof register}`,\n  );\n\n  return (\n      <div className=\"pt-5\">\n        <Switch>\n\n          <Route exact path=\"/\">\n            <Homepage />\n          </Route>\n\n          <Route exact path=\"/login\">\n            <LoginForm login={login} />\n          </Route>\n\n          <Route exact path=\"/signup\">\n            <SignupForm signup={signup} />\n          </Route>\n\n          <PrivateRoute exact path=\"/companies\">\n            <CompanyList />\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/jobs\">\n            <JobList />\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/companies/:handle\">\n            <CompanyDetail />\n          </PrivateRoute>\n\n          <PrivateRoute path=\"/profile\">\n            <ProfileForm />\n          </PrivateRoute>\n\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n  );\n}\n\nexport default Routes;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nconst App = () => {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n    \"App\",\n    \"infoLoaded=\",\n    infoLoaded,\n    \"currentUser=\",\n    currentUser,\n    \"token=\",\n    token\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(\n    function loadUserInfo() {\n      console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n      async function getCurrentUser() {\n        if (token) {\n          try {\n            let { username } = jwt.decode(token);\n            // put the token on the Api class so it can use it to call the API.\n            JoblyApi.token = token;\n            let currentUser = await JoblyApi.getCurrentUser(username);\n            setCurrentUser(currentUser);\n            setApplicationIds(new Set(currentUser.applications));\n          } catch (err) {\n            console.error(\"App loadUserInfo: problem loading\", err);\n            setCurrentUser(null);\n          }\n        }\n        setInfoLoaded(true);\n      }\n\n      setInfoLoaded(false);\n      getCurrentUser();\n    },\n    [token]\n  );\n\n  /* Handles site-wide logout */\n\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /* Handles site-wide signup */\n\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /* Handles site-wide login. */\n\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n    <BrowserRouter>\n      <UserContext.Provider\n        value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}\n      >\n        <div className=\"App\">\n          <Navigation logout={logout} />\n          <Routes login={login} signup={signup} />\n        </div>\n      </UserContext.Provider>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    \"New content is available and will be used when all \" +\n                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get(\"content-type\");\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf(\"javascript\") === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            \"No internet connection found. App is running in offline mode.\",\n        );\n      });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}